# This file contains pin mappings for the stock 2020 Creality Ender 3
# V2. To use this config, during "make menuconfig" select the
# STM32F103 with a "28KiB bootloader" and serial (on USART1 PA10/PA9)
# communication.
 
# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC
 
# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.
 
# See docs/Config_Reference.md for a description of parameters.
 
[virtual_sdcard]
path: ~/gcode_files
 
[display_status]
 
[pause_resume]
 
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
 
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
 
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
 
#The following Macro is used to replace the ending gcode in your slicer
#replace the end gcode in your slicer with END_PRINT
 
[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers except Z
    M84 X Y E
 
[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 0
position_max: 235
homing_speed: 50
 
[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA6
position_endstop: 0
position_max: 235
homing_speed: 50
 
[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: ^PA7
position_endstop: 0.0
position_max: 250
 
[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
pid_Kp: 23.561
pid_Ki: 1.208
pid_Kd: 114.859
min_temp: 0
max_temp: 300
 
[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130
 
[fan]
pin: PA0
 
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command
 
[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[bltouch]
sensor_pin: ^PB1
control_pin: PB0
x_offset: 35.5
y_offset: 0
#z_offset:-3.62
stow_on_each_sample = False
probe_with_touch_mode = True

[safe_z_home]
#home_xy_position: 117.5, 117.5 # Change coordinates to the center of your print bed
home_xy_position: 162.5, 125.5
speed: 150
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

[bed_mesh]
speed: 200
horizontal_move_z: 5
mesh_min: 15, 15
mesh_max: 190, 220
probe_count:15,15
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

#[bed_mesh]
#speed: 200
#horizontal_move_z: 5
#mesh_min: 46, 9
#mesh_max: 174, 211
#probe_count:15,15
#algorithm: bicubic
#fade_start: 1
#fade_end: 10
#fade_target: 0

[screws_tilt_adjust]
screw1: 73,37
screw1_name: front left screw
screw2: 234,37
screw2_name: front right screw
screw3: 234,206
screw3_name: rear right screw
screw4: 73,206
screw4_name: rear left screw
horizontal_move_z: 10
speed: 200
screw_thread: CW-M4

# MACROS
[save_variables]
filename: ~/klipper_config/variables.cfg ; variable storage file

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle up and out of the way
    G1 Z50 F300
    G1 X2 Y10 F3000
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    LEVEL_BED_ADVANCED MAX_AGE=10 ; probe mesh eventually
    PRIME_LINE


# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode: 
    ;M117 Prime Line
    G92 E0 ;Reset Extruder
    # move z axis 
    G1 Z2.0 F3000 ;Move Z Axis up
    # move to prime position 
    G1 X20 Y30 F5000.0 ;Move to start position
    G1 X20 Y200.0 F1500.0 E15 ;Draw the first line
    G1 X22 Y200.0 F5000.0 ;Move to side a little
    G1 X22 Y50 F1500.0 E30 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up

    # Prime nozzle
    #G92 E0
    #G1 Y140 E10 F1500 ; prime the nozzle
    #G1 X2.3 F5000
    #G92 E0
    #G1 Y10 E10 F1200 ; prime the nozzle
    #G92 E0

[gcode_macro END_PRINT]
gcode:

   # {% if max_layer_z < max_print_height %}
   # G1 Z{%z_offset+min(max_layer_z+2, max_print_height)%} F600 ; Move print head up
   # G1 X5 Y{% print_bed_max[1]*0.8 %} F{% travel_speed*60 %} ; present print
   # {% if max_layer_z < max_print_height-10 %}
   #     G1 Z{% z_offset+min(max_layer_z+70, max_print_height-10) %} F600 ; Move print head further up
   # {% if max_layer_z < max_print_height*0.6 %}G1 Z{% max_print_height*0.6 %} F600 ; Move print head further up
   # M140 S0 ; turn off heatbed
   # M104 S0 ; turn off temperature
   # M107 ; turn off fan
   # SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
   # M84 X Y E ; disable motors
    
   G91 ; Relative positioning
   G1 E-3 F1800 ; Retract
   G1 F3000 Z3 ; Move up
   G90 ; Absolute pos.
   G1 X250 Y215; present print
   # Turn off bed, extruder, and fan
   M140 S0
   M104 S0
   M106 S0
   SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
   M84 ; Disable steppers

; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

########################################################################
# LEVELING
########################################################################

[gcode_macro Level]
gcode:
  G28
  SCREWS_TILT_CALCULATE

[gcode_macro G29]
gcode:
    G28 # home
    BED_MESH_CALIBRATE

# F360 uses M420 to enable bed levelling, we'll treat it like G29.
[gcode_macro M420]
gcode:
    BED_MESH_CALIBRATE

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*# z_offset = 1.300
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.525000, -0.457500, -0.402500, -0.352500, -0.285000, -0.235000, -0.165000, -0.097500, -0.062500, -0.002500, 0.055000
#*# 	-0.462500, -0.397500, -0.347500, -0.297500, -0.242500, -0.177500, -0.132500, -0.077500, -0.040000, 0.020000, 0.077500
#*# 	-0.405000, -0.345000, -0.297500, -0.250000, -0.190000, -0.140000, -0.077500, -0.012500, 0.022500, 0.080000, 0.140000
#*# 	-0.375000, -0.315000, -0.262500, -0.207500, -0.155000, -0.102500, -0.037500, 0.022500, 0.060000, 0.117500, 0.177500
#*# 	-0.325000, -0.267500, -0.217500, -0.170000, -0.120000, -0.075000, -0.017500, 0.037500, 0.072500, 0.127500, 0.170000
#*# 	-0.300000, -0.240000, -0.195000, -0.135000, -0.080000, -0.037500, 0.022500, 0.072500, 0.117500, 0.162500, 0.222500
#*# 	-0.282500, -0.222500, -0.170000, -0.112500, -0.047500, -0.007500, 0.057500, 0.115000, 0.155000, 0.210000, 0.260000
#*# 	-0.235000, -0.150000, -0.127500, -0.082500, -0.020000, 0.015000, 0.070000, 0.132500, 0.167500, 0.217500, 0.270000
#*# 	-0.200000, -0.145000, -0.095000, -0.052500, 0.007500, 0.050000, 0.097500, 0.155000, 0.192500, 0.252500, 0.297500
#*# 	-0.232500, -0.170000, -0.125000, -0.077500, -0.015000, 0.027500, 0.087500, 0.155000, 0.202500, 0.267500, 0.330000
#*# 	-0.247500, -0.182500, -0.137500, -0.082500, -0.015000, 0.025000, 0.090000, 0.162500, 0.207500, 0.275000, 0.340000
#*# tension = 0.2
#*# min_x = 46.0
#*# algo = bicubic
#*# y_count = 11
#*# mesh_y_pps = 2
#*# min_y = 9.0
#*# x_count = 11
#*# max_y = 211.0
#*# mesh_x_pps = 2
#*# max_x = 174.0
